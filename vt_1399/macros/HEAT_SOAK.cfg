# https://klipper.discourse.group/t/interruptible-heat-soak/1552
[gcode_macro HEAT_SOAK]
description: Heats up the printer until the chamber reaches a specificed temperature

variable_target_bed: 0
variable_stage: None ## heating -> soaking -> done -> None

## in seconds
variable_check_interval: 10
variable_soak_timeout: 0
variable_total_time_elapsed: 0

gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}

    {% set target_bed = params.BED | default(60) | float %}
    {% set target_extruder = params.EXTRUDER | default(200) | float %}
    {% set target_chamber = params.CHAMBER | default(30) | float %}
    {% set soak_timeout = (params.TIMEOUT | default(60) | int) * 60 %} ## minutes to seconds

    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_bed          VALUE={ target_bed }
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_extruder     VALUE={ target_extruder }
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage               VALUE="'heating'"
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_timeout        VALUE={ target_chamber }
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0

    ;; fire up the heater
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={ target_extruder }
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={ target_bed }

    ;; run the fan to circulate air
    M106 S255

    ;; put the bed and nozzle where they're a safe distance apart
    G1 Z125 F600

    M84 ;; turn off steppers

    UPDATE_DELAYED_GCODE ID=_HEAT_SOAK_HANDLER DURATION={ check_interval }

[gcode_macro CANCEL_HEAT_SOAK]
description: cancels an in-progress HEAT_SOAK cycle
gcode:
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'cancel'"
    UPDATE_DELAYED_GCODE ID=_HEAT_SOAK_HANDLER DURATION=1

[delayed_gcode _HEAT_SOAK_HANDLER]
gcode:
    {% set heat_soak = printer['gcode_macro HEAT_SOAK'] %}

    ## update total time elapsed
    {% set total_time_elapsed = heat_soak.total_time_elapsed + heat_soak.check_interval %}
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed VALUE={ total_time_elapsed }

    {% set stage = heat_soak.stage %}
    {% if stage == "heating" and printer.heater_bed.temperature >= heat_soak.target_bed %}
        {% set stage = "soaking" %}
    {% endif %}

    {% if stage == "soaking" %}
        ## update soak countdown
        {% set soak_timeout = [heat_soak.soak_timeout  - heat_soak.check_interval, 0] | max %}
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ soak_timeout }

        {% if printer.chamber.temperature >= heat_soak.target_chamber %}
            {% set stage = "done" %}
        {% elif soak_timeout <= 0 %}
            {% set stage = "cancel" %}
        {% endif %}
    {% endif %}

    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'{ stage }'"

    {% if stage in ("done", "cancel") %}

        {% if stage == "cancel" %}
            {% set stage = "done" %}
            TURN_OFF_HEATERS
            M107 ; turn off fan

            { action_respond_info("soak cancelled after %s" % (~%.1fm | format(total_time_elapsed / 60.0))) }
            M117 { "soak cancelled after ~%.1fm" | format(total_time_elapsed / 60.0) }
        {% else %}
            { action_respond_info("soak complete after %s" % (~%.1fm | format(total_time_elapsed / 60.0))) }
            M117 { "soak complete after %.1fm" | format(total_time_elapsed / 60.0) }
        {% endif %}

        ## reset all state vars, except stage, which may be queried via the api
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_bed          VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_timeout        VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0

    {% else %}

        {% if total_time_elapsed % 90 == 0 %}
            ## output status periodically
            {% if stage == "heating" %}
                { action_respond_info("heating -- %s" % (~%.1fm | format(total_time_elapsed / 60.0)) }
                M117 { "heating -- %.1fm elapsed" | format(total_time_elapsed / 60.0) }
            {% elif stage == "soaking" %}
                { action_respond_info("soaking -- %s" % (~%.1fm | format(total_time_elapsed / 60.0)) }
                M117 { "soaking -- %.1fm remaining" | format(soak_time_remaining / 60.0) }
            {% endif %}
        {% endif %}

        ## trigger ourselves again
        UPDATE_DELAYED_GCODE ID=_HEAT_SOAK_HANDLER DURATION={ heat_soak.check_interval }

        ## dwell for 1ms to prevent from going idle
        G4 P1

    {% endif %}